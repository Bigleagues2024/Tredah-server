swagger: '2.0'
info:
  title: Tredah marekt place API Documentation
  description: API documentation Tredah marekt place. Authentications are handled with cookies set from the server.
  version: 1.0
  contact:
    email: successakinyemi365@gmail.com
  license:
    name: Apache 2.0
    url: 'http://apache.org/'
host: sandbox-tredah.onrender.com/api
basePath: 
schemes:
  - https

securityDefinitions:
  Tredahoneadmintoken:
    type: apiKey
    in: cookie
    name: tredahoneadmintoken
  Trdahoneadminauthid:
    type: apiKey
    in: cookie
    name: trdahoneadminauthid
  Tredahtoken:
    type: apiKey
    in: cookie
    name: tredahtoken
  Tredahauthid:
    type: apiKey
    in: cookie
    name: tredahauthid
  Tredahuserid:
    type: apiKey
    in: cookie
    name: tredahuserid

security:
  - Tredahoneadmintoken: []
  - Trdahoneadminauthid: []
  - Tredahtoken: []
  - Tredahauthid: []
  - Tredahuserid: []


tags:
  - name: Auth
    description: User Authentiction
  - name: Upload
    description: Upload files endpoint
  - name: User
    description: Users data
  - name: Product
    description: Product endpoint
  - name: Seller
    description: Seller endpoint
  - name: General Socket
    description: Inter app chat features socket.io
  - name: Order Socket
    description: Chat for order contract exchange
  - name: Transaction
    description: Transactions histroy endpoint
  - name: Order
    description: Orders histroy endpoint
  - name: Subscription
    description: Subscription endpoint


paths:
#AUTH
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register new user   
      description: Endpoint to register user. Temporary auth cookie would be sent ensure to complete otp verification on the same page. userType = ['seller', 'buyer'] sellerAccountType = ['personal', 'business'] buyerAccountType = ['B2B', 'B2C']
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
              - confirmPassword
              - mobileNumber
              - userType
              - sellerAccountType
              - buyerAccountType
            properties:
              email:
                type: string
              password:
                type: string
              confirmPassword:
                type: string
              mobileNumber:
                type: string
              userType:
                type: string
              sellerAccountType:
                type: string
              buyerAccountType:
                type: string
      responses:
        200:
          description: Success - OTP sent to registered email address
        400:
          description: User error
        500:
          description: Server error

  /auth/resendOtp:
    post:
      tags:
        - Auth
      summary: Resend Verification OTP 
      description: Endpoint to resend verifcation OTP
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
      responses:
        200:
          description: Success - OTP resent to registered email address
        400:
          description: User error
        500:
          description: Server error

  /auth/verifyOtp:
    post:
      tags:
        - Auth
      summary: Verify OTP code 
      description: Endpoint to verify OTP code
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - otp
            properties:
              otp:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /auth/completeSellerOnboarding:
    post:
      tags:
        - Auth
      summary: Complete seller account onbaording process 
      description: Endpoint to complete seller onboarding process
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - address
            properties:
              sellerAccountType:
                type: string
              name:
                type: string
              email:
                type: string
              mobileNumber:
                type: string
              address:
                type: string
              nin:
                type: string
              companyName:
                type: string
              businessType:
                type: string
              businessRegistrationNumber:
                type: string
              businessAddress:
                type: string
              businessCategory:
                type: string
              businessEmail: 
                type: string
              taxId:
                type: string
              socialLink:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /auth/completeBuyerOnboarding:
    post:
      tags:
        - Auth
      summary: Complete buyer account onbaording process 
      description: Endpoint to complete buyer onboarding process
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - address
            properties:
              buyerAccountType:
                type: string
              name:
                type: string
              email:
                type: string
              mobileNumber:
                type: string
              address:
                type: string
              companyName:
                type: string
              businessEmail:
                type: string
              businessRegistrationNumber:
                type: string
              businessAddress:
                type: string
              businessCategory:
                type: string
              taxId:
                type: string 
              socialLink:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user 
      description: Endpoint to login user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /auth/forgotPassword:
    post:
      tags:
        - Auth
      summary: Forgot password 
      description: Endpoint to forgot password
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /auth/resetPassword/{resetToken}:
    post:
      tags:
        - Auth
      summary: Reset password 
      description: Endpoint to reset password
      parameters:
        - name: resetToken
          in: path
          required: true
          description: the reset token sent with the forgot password link
          schema:
            type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - password
              - confirmPassword
            properties:
              email:
                type: string
              confirmPassword:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /auth/verifyToken:
    get:
      tags:
        - Auth
      summary: Verify if user auth is still valid
      description: Endpoint to is user auth is still valid
      responses:
        200:
          description: Success - true
        400:
          description: error - false
        500:
          description: Server error

  /auth/signout:
    post:
      tags:
        - Auth
      summary: Signout of Account
      description: Endpoint to enable user signout of account
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /auth/requestOtp:
    post:
      tags:
        - Auth
      summary: Request OTP code
      description: Endpoint to enable user request OTP code for sensitive operations
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

#UPLOAD
  /upload/:
    post:
      tags:
        - Upload
      summary: Upload media files
      description: Endpoint for user to upload media files
      consumes:
        - multipart/form-data
      parameters:
        - name: media
          in: formData
          required: false
          description: Single file upload
          type: file
        - name: medias
          in: formData
          required: false
          description: Multiple file upload
          type: file
          collectionFormat: multi
      responses:
        200:
          description: success
        400:
          description: User error
        500:
          description: Server error

#USER
  /user/updateProfile:
    post:
      tags:
        - User
      summary: Update profile
      description: Endpoint for user to update their profile
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              accountName:
                type: string
              accountNumber:
                type: string
              bankName:
                type: string
              name:
                type: string
              imageUrl:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /user/updatePassword:
    post:
      tags:
        - User
      summary: Update password
      description: Endpoint for user to update their password
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              otp:
                type: string
              password:
                type: string
              oldPassword:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /user/updateSellerInfo:
    post:
      tags:
        - User
      summary: Update Seller Info 
      description: Endpoint to update seller info
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              address:
                type: string
              companyName:
                type: string
              businessType:
                type: string
              businessAddress:
                type: string
              businessEmail:
                type: string
              businessCategory:
                type: string
              socialLink:
                type: string
              businessRegistrationNumber:
                type: string
              taxId:
                type: string
              nin:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /user/updateBuyerInfo:
    post:
      tags:
        - User
      summary: Update Buyer Info 
      description: Endpoint to update buyer info
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              businessRegistrationNumber:
                type: string
              address:
                type: string
              companyName:
                type: string
              businessType:
                type: string
              businessRegistrationNumber:
                type: string
              businessAddress:
                type: string
              businessCategory:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /user/approveAccount:
    post:
      tags:
        - User
      summary: Approve account (ADMIN ROUTE)
      description: Endpoint to approve user account
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - userId
            properties:
              userId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /user/blockAccount:
    post:
      tags:
        - User
      summary: Block account (ADMIN ROUTE)
      description: Endpoint to block user account
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - userId
            properties:
              userId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /user/notification:
    post:
      tags:
        - User
      summary: Send notification to users (ADMIN ROUTE)
      description: Endpoint to send notification to user. userType - `['seller', 'buyer']`
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
              image:
                type: string
              userType:
                type: string
              allUsers:
                type: boolean
                example: false
              user:
                type: array
                items: string
                example: ['userId1', 'userId2']
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /user/addShippingAddres:
    post:
      tags:
        - User
      summary: Add Shipping Address
      description: Endpoint to add shipping address by user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - addressLine
              - country
              - state
              - city
              - postalCode
            properties:
              name:
                type: string
              phoneNumber:
                type: string
              addressLine:
                type: string
              addressLineTwo:
                type: string
              country:
                type: string
              state:
                type: string
              city:
                type: string
              postalCode:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /user/editShippingAddres:
    post:
      tags:
        - User
      summary: Update Shipping Address
      description: Endpoint to update shipping address by user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - id
              - addressLine
              - country
              - state
              - city
              - postalCode
            properties:
              id:
                type: string
              name:
                type: string
              phoneNumber:
                type: string
              addressLine:
                type: string
              addressLineTwo:
                type: string
              country:
                type: string
              state:
                type: string
              city:
                type: string
              postalCode:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /user/deleteShippingAddres:
    post:
      tags:
        - User
      summary: Delete Shipping Address
      description: Endpoint to delete shipping address by user
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /user/getShippingAddress:
    get:
      tags:
        - User
      summary: Get User Shipping Address(s)
      description: Endpoint user shipping address(s)
        200:
          description: Success - true
        400:
          description: error - false
        500:
          description: Server error

  /user/getProfile:
    get:
      tags:
        - User
      summary: Get profile
      description: Endpoint for user to get their profile
      responses:
        200:
          description: Success - true
        400:
          description: error - false
        500:
          description: Server error

  /user/getNotifications:
    get:
      tags:
        - User
      summary: Get notifications
      description: The endpoint provides all user notifications.
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /user/markNotificationAsRead:
    post:
      tags:
        - User
      summary: Mark notification as read
      description: The endpoint allows to mark a notification as read
      required:
        - _id
      parameters:
        - name: _id
          in: body
          required: true
          description: The _id of the notification
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /user/markAllNotificationAsRead:
    post:
      tags:
        - User
      summary: mark notifications as read
      description: The endpoint marks all notification as read
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /user/getAllUsers:
    get:
      tags:
        - User
      summary: Get users (ADMIN ROUTE)
      description: The endpoint provides all users data
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
        - name: startDate
          in: query
          required: false
          description: start date to begin fetching data
          schema:
            type: string
        - name: endDate
          in: query
          required: false
          description: end date to stop fetching data
          schema:
            type: string
        - name: search
          in: query
          required: false
          description: search for users based on name or email
          schema:
            type: string
        - name: oldest
          in: query
          required: false
          description: fetch data based on oldest. by default fetch data based on latest data
          schema:
            type: boolean
            example: true
        - name: verified
          in: query
          required: false
          description: fetch data based on verified users.
          schema:
            type: boolean
            example: true
        - name: isActive
          in: query
          required: false
          description: fetch data based on active users.
          schema:
            type: boolean
            example: true
        - name: isBlocked
          in: query
          required: false
          description: fetch data based on blocked users.
          schema:
            type: boolean
            example: true
        - name: accountSuspended
          in: query
          required: false
          description: fetch data based on temprorary suspended users.
          schema:
            type: boolean
            example: true
        - name: subscriber
          in: query
          required: false
          description: to fetch subscribers users
          schema:
            type: boolean
            example: false
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /user/getUser/{userId}:
    get:
      tags:
        - User
      summary: Get user data (ADMIN ROUTE)
      description: The endpoint provides a single user data
      parameters:
        - name: userId
          in: path
          required: true
          description: The userId of the user
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /user/getUserStats:
    get:
      tags:
        - User
      summary: Get user stats (ADMIN ROUTE)
      description: The endpoint provides user stats histroy
      parameters:
        - name: period
          in: query
          required: false
          description: The period for which the data should be fetched, values are - [3days 7days 30days 3mth 6mth 1year alltime] default is 30days
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /user/getSubscriptionHistroy:
    get:
      tags:
        - User
      summary: Get user subscription histroy
      description: The endpoint provides user subscription histroy
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /user/getUserSubscriptionHistroy/{email}:
    get:
      tags:
        - User
      summary: Get user subscription histroy (ADMIN ROUTE)
      description: The endpoint provides user subscription histroy
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
        - name: email
          in: params
          required: true
          description: The email of the user
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /user/getSubscriptionDetails/{id}:
    get:
      tags:
        - User
      summary: Get subscription detail (ADMIN ROUTE)
      description: The endpoint provides subscription detail
      parameters:
        - name: id
          in: params
          required: true
          description: The id (_id) of the subscription
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

#PRODUCT
  /product/newProduct:
    post:
      tags:
        - Product
      summary: Create a new product (SELLER)
      description: Endpoint to create a new product by seller
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - name
              - productImageUrl
              - about
              - description
              - displayPrice
              - category
            properties:
              name:
                type: string
              about:
                type: string
              description:
                type: string
              category: 
                type: array
                items:
                  type: string
              subCategory: 
                type: array
                items:
                  type: string
              displayPrice:
                type: number
              weight:
                type: number
              weightValue:
                type: number
              moq:
                type: number
              variant:
                type: array
                items:
                  type: object
              quantityInStock:
                type: number
              productImageUrl:
                type: string
              mediaImagesUrls:
                type: array
                items:
                  type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/editProduct:
    post:
      tags:
        - Product
      summary: Update a product (SELLER)
      description: Endpoint to update a product by seller
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - productId
              - name
              - productImageUrl
              - about
              - description
              - displayPrice
              - category
            properties:
              productId:
                type: string
              name:
                type: string
              about:
                type: string
              description:
                type: string
              category: 
                type: array
                items:
                  type: string
              subCategory: 
                type: array
                items:
                  type: string
              displayPrice:
                type: number
              weight:
                type: number
              weightValue:
                type: number
              moq:
                type: number
              variant:
                type: array
                items:
                  type: object
              quantityInStock:
                type: number
              productImageUrl:
                type: string
              mediaImagesUrls:
                type: array
                items:
                  type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/deleteProduct:
    post:
      tags:
        - Product
      summary: Delete a product (SELLER)
      description: Endpoint to delete a product by seller
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - productId
            properties:
              productId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/deActivateProduct:
    post:
      tags:
        - Product
      summary: Deactivate a product (SELLER)
      description: Endpoint to deactivate a product by seller
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - productId
            properties:
              productId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/activateProduct:
    post:
      tags:
        - Product
      summary: Activate a product (SELLER)
      description: Endpoint to activate a product by seller
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - productId
            properties:
              productId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/rateProduct:
    post:
      tags:
        - Product
      summary: Rate a product
      description: Endpoint to drop ratings for a product by users
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - productId
            properties:
              productId:
                type: string
              rating: 
                type: number
                min: 1
                max: 5
              review: 
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/likeProduct:
    post:
      tags:
        - Product
      summary: Like a product
      description: Endpoint to drop like for a product by users
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - productId
            properties:
              productId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/unlikeProduct:
    post:
      tags:
        - Product
      summary: Unlike a product
      description: Endpoint to unlike a product by users
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - productId
            properties:
              productId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/blockProduct:
    post:
      tags:
        - Product
      summary: Block a product (ADMIN ROUTE)
      description: Endpoint to block a product
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - productId
            properties:
              productId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/unBlockProduct:
    post:
      tags:
        - Product
      summary: Ublock a product (ADMIN ROUTE)
      description: Endpoint to unblock a product
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - productId
            properties:
              productId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/getCategories:
    get:
      tags:
        - Product
      summary: Get product categories
      description: Endpoint to get product categories
      parameters:
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /product/getProducts:
    get:
      tags:
        - Product
      summary: Get all available product to users
      description: The endpoint provides all avaible products to users
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
        - name: search
          in: query
          required: false
          description: search for product e.g name store name etc
          schema:
            type: string
        - name: category
          in: query
          required: false
          description: Search based on category
          schema:
            type: string
        - name: sellerId
          in: query
          required: false
          description: Search based on sellerId
          schema:
            type: string
        - name: storeName
          in: query
          required: false
          description: Search based on store name
          schema:
            type: string
        - name: oldest
          in: query
          required: false
          description: Filter based on oldest product
          schema:
            type: string
        - name: latest
          in: query
          required: false
          description: Filter based on lastest
          schema:
            type: boolean
            example: false
        - name: maxPrice
          in: query
          required: false
          description: Filter based max price range
          schema:
            type: number
            example: 100
        - name: minPrice
          in: query
          required: false
          description: Filter based min price range
          schema:
            type: number
            example: 100
        - name: popular
          in: query
          required: false
          description: Filter based on popular product
          schema:
            type: boolean
            example: false
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error
          
  /product/getStoreProducts/{sellerId}:
    get:
      tags:
        - Product
      summary: Get store available products to users
      description: The endpoint provides all available products to users of a particular store
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
        - name: search
          in: query
          required: false
          description: search for product e.g name store name etc
          schema:
            type: string
        - name: category
          in: query
          required: false
          description: Search based on category
          schema:
            type: string
        - name: sellerId
          in: path
          required: true
          description: Search based on sellerId
          schema:
            type: string
        - name: storeName
          in: query
          required: false
          description: Search based on store name
          schema:
            type: string
        - name: oldest
          in: query
          required: false
          description: Filter based on oldest product
          schema:
            type: string
        - name: latest
          in: query
          required: false
          description: Filter based on lastest
          schema:
            type: boolean
            example: false
        - name: maxPrice
          in: query
          required: false
          description: Filter based max price range
          schema:
            type: boolean
            example: false
        - name: minPrice
          in: query
          required: false
          description: Filter based min price range
          schema:
            type: boolean
            example: false
        - name: popular
          in: query
          required: false
          description: Filter based on popular product
          schema:
            type: boolean
            example: false
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /product/getProduct/{productId}:
    get:
      tags:
        - Product
      summary: Get a product to user
      description: The endpoint provides a product details to user
      parameters:
        - name: productId
          in: path
          required: true
          description: productId of the product
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /product/getRelatedProduct/{productId}:
    get:
      tags:
        - Product
      summary: Get related product of a product to user
      description: The endpoint provides related products a product
      parameters:
        - name: productId
          in: path
          required: true
          description: productId of the product
          schema:
            type: string
        - name: limit
          in: query
          required: true
          description: limit of the data to fetch
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: page of the data to fetch
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /product/getProductReview/{productId}:
    get:
      tags:
        - Product
      summary: Get a product to review
      description: The endpoint provides a product reviews to user
      parameters:
        - name: productId
          in: path
          required: true
          description: productId of the product
          schema:
            type: string
        - name: limit
          in: query
          required: true
          description: limit of the data to fetch
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: page of the data to fetch
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /product/getStoreProduct:
    get:
      tags:
        - Product
      summary: Get all products of a store owner (STORE OWNER ROUTE)
      description: The endpoint provides all products of a store owner
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
        - name: search
          in: query
          required: false
          description: search for product e.g name store name etc
          schema:
            type: string
        - name: category
          in: query
          required: false
          description: Search based on category
          schema:
            type: string
        - name: oldest
          in: query
          required: false
          description: Filter based on oldest product
          schema:
            type: string
        - name: latest
          in: query
          required: false
          description: Filter based on lastest
          schema:
            type: boolean
            example: false
        - name: maxPrice
          in: query
          required: false
          description: Filter based max price range
          schema:
            type: boolean
            example: false
        - name: minPrice
          in: query
          required: false
          description: Filter based min price range
          schema:
            type: boolean
            example: false
        - name: popular
          in: query
          required: false
          description: Filter based on popular product
          schema:
            type: boolean
            example: false
        - name: active
          in: query
          required: false
          description: Filter based on active product
          schema:
            type: boolean
            example: false
        - name: blocked
          in: query
          required: false
          description: Filter based on bocked product
          schema:
            type: boolean
            example: false
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /product/getProductDetail/{productId}:
    get:
      tags:
        - Product
      summary: Get a product details (STORE OWNER ROUTE)
      description: The endpoint provides product detail owner
      parameters:
        - name: productId
          in: query
          required: true
          description: The productId
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /product/getAllProducts:
    get:
      tags:
        - Product
      summary: Get all product (ADMIN ROUTE)
      description: The endpoint provides all products
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
        - name: search
          in: query
          required: false
          description: search for product e.g name store name etc
          schema:
            type: string
        - name: category
          in: query
          required: false
          description: Search based on category
          schema:
            type: string
        - name: sellerId
          in: query
          required: false
          description: Search based on sellerId
          schema:
            type: string
        - name: storeName
          in: query
          required: false
          description: Search based on store name
          schema:
            type: string
        - name: oldest
          in: query
          required: false
          description: Filter based on oldest product
          schema:
            type: string
        - name: latest
          in: query
          required: false
          description: Filter based on lastest
          schema:
            type: boolean
            example: false
        - name: maxPrice
          in: query
          required: false
          description: Filter based max price range
          schema:
            type: boolean
            example: false
        - name: minPrice
          in: query
          required: false
          description: Filter based min price range
          schema:
            type: boolean
            example: false
        - name: popular
          in: query
          required: false
          description: Filter based on popular product
          schema:
            type: boolean
            example: false
        - name: active
          in: query
          required: false
          description: Filter based on active product
          schema:
            type: boolean
            example: false
        - name: blocked
          in: query
          required: false
          description: Filter based on bocked product
          schema:
            type: boolean
            example: false
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /product/getSellerProducts/{sellerId}:
    get:
      tags:
        - Product
      summary: Get all products of a store owner (ADMIN ROUTE)
      description: The endpoint provides all products of a store owner
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
        - name: search
          in: query
          required: false
          description: search for product e.g name store name etc
          schema:
            type: string
        - name: category
          in: query
          required: false
          description: Search based on category
          schema:
            type: string
        - name: sellerId
          in: path
          required: true
          description: Search based on sellerId
          schema:
            type: string
        - name: storeName
          in: query
          required: false
          description: Search based on store name
          schema:
            type: string
        - name: oldest
          in: query
          required: false
          description: Filter based on oldest product
          schema:
            type: string
        - name: latest
          in: query
          required: false
          description: Filter based on lastest
          schema:
            type: boolean
            example: false
        - name: maxPrice
          in: query
          required: false
          description: Filter based max price range
          schema:
            type: boolean
            example: false
        - name: minPrice
          in: query
          required: false
          description: Filter based min price range
          schema:
            type: boolean
            example: false
        - name: popular
          in: query
          required: false
          description: Filter based on popular product
          schema:
            type: boolean
            example: false
        - name: active
          in: query
          required: false
          description: Filter based on active product
          schema:
            type: boolean
            example: false
        - name: blocked
          in: query
          required: false
          description: Filter based on bocked product
          schema:
            type: boolean
            example: false
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /product/getAProduct/{productId}:
    get:
      tags:
        - Product
      summary: Get a product details (ADMIN ROUTE)
      description: The endpoint provides product detail owner
      parameters:
        - name: productId
          in: query
          required: true
          description: The productId
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /product/getSavedProduct:
    get:
      tags:
        - Product
      summary: Get user saved product
      description: The endpoint list of all available user saved products
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
        - name: search
          in: query
          required: false
          description: search for product e.g name store name etc
          schema:
            type: string
        - name: category
          in: query
          required: false
          description: Search based on category
          schema:
            type: string
        - name: sellerId
          in: query
          required: false
          description: Search based on sellerId
          schema:
            type: string
        - name: storeName
          in: query
          required: false
          description: Search based on store name
          schema:
            type: string
        - name: oldest
          in: query
          required: false
          description: Filter based on oldest product
          schema:
            type: string
        - name: latest
          in: query
          required: false
          description: Filter based on lastest
          schema:
            type: boolean
            example: false
        - name: maxPrice
          in: query
          required: false
          description: Filter based max price range
          schema:
            type: number
            example: 100
        - name: minPrice
          in: query
          required: false
          description: Filter based min price range
          schema:
            type: number
            example: 100
        - name: popular
          in: query
          required: false
          description: Filter based on popular product
          schema:
            type: boolean
            example: false
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

#SELLER
  /seller/updateStoreDetails:
    post:
      tags:
        - Seller
      summary: Update Store details (SELELR)
      description: Endpoint to update/create store front details
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              storeImg:
                type: string
              name: 
                type: string
              about: 
                type: string
              description: 
                type: string
              businessAddress:
                type: string
              socialLink: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /seller/rateStore:
    post:
      tags:
        - Seller
      summary: Rate a seller store front
      description: Endpoint to drop ratings for a seller store front by users
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - sellerId
            properties:
              sellerId:
                type: string
              rating: 
                type: number
                min: 1
                max: 5
              review: 
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /seller/saveStore:
    post:
      tags:
        - Seller
      summary: Save seller
      description: Endpoint to save store front by users
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - sellerId
            properties:
              sellerId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /seller/unfollowStore:
    post:
      tags:
        - Seller
      summary: unsave/unfollow seller
      description: Endpoint to unsave/unfollow store front by users
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - sellerId
            properties:
              sellerId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /seller/activateStore:
    post:
      tags:
        - Seller
      summary: Activate store front (ADMIN ROUTE)
      description: Endpoint to activate a store
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - sellerId
            properties:
              sellerId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /seller/deactivateStore:
    post:
      tags:
        - Seller
      summary: Deactivate store front (ADMIN ROUTE)
      description: Endpoint to deactivate a store
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - sellerId
            properties:
              sellerId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /seller/getStoreReview/{sellerId}:
    get:
      tags:
        - Seller
      summary: Get a store front review
      description: The endpoint provides a store front reviews to user
      parameters:
        - name: sellerId
          in: path
          required: true
          description: sellerId of the product
          schema:
            type: string
        - name: limit
          in: query
          required: true
          description: limit of the data to fetch
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: page of the data to fetch
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /seller/getStoreDetails/{sellerId}:
    get:
      tags:
        - Seller
      summary: Get a store front details
      description: The endpoint provides a store front details to user
      parameters:
        - name: sellerId
          in: path
          required: true
          description: sellerId of the product
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /seller/getStoreInfo:
    get:
      tags:
        - Seller
      summary: Get a store front details (STORE OWNER)
      description: The endpoint provides a store front details to store owner
      parameters:
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /seller/getAllStores:
    get:
      tags:
        - Seller
      summary: Get all sellers store fronts (ADMIN ROUTE)
      description: The endpoint provides all seller store fronts
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
        - name: search
          in: query
          required: false
          description: search for product e.g name store name etc
          schema:
            type: string
        - name: active
          in: query
          required: false
          description: Filter based on active product
          schema:
            type: boolean
            example: false
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /seller/getAStoreInfo/{sellerId}:
    get:
      tags:
        - Seller
      summary: Get a store front details (ADMIN ROUTE)
      description: The endpoint provides a store front details to admin
      parameters:
        - name: sellerId
          in: path
          required: true
          description: sellerId of the product
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /seller/getSavedStoreInfo:
    get:
      tags:
        - Seller
      summary: Get all saved store of a user
      description: The endpoint provides all saved and active store of a user
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

#GENERAL SOCKET CONNECTIONS
  /general:
    post:
      tags:
        - General Socket
      summary: SOCKET.IO CONNECTION (SEND MESSAGE) socket.on(sendMessage, data) response- socket.emit(sendMessage, response) - RESPONSE TO OTHER USER socket.emit(incomingMessage, response)
      description: This is a socket.io connection to send message under the /general namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - receiverId
            properties:
              receiverId:
                type: string
              message: 
                type: string
              mediaLink: 
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /general/:
    post:
      tags:
        - General Socket
      summary: SOCKET.IO CONNECTION (GET CHAT HISTROY) socket.on(getChatHistroy, data) response- socket.emit(getChatHistroy, response)
      description: This is a socket.io connection to get a single message chat under the /general namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - chatId
            properties:
              chatId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /general//:
    post:
      tags:
        - General Socket
      summary: SOCKET.IO CONNECTION (EDIT MESSAGE) socket.on(editMessage, data) response- socket.emit(editMessage, response) - RESPONSE TO OTHER USER socket.emit(messageUpdated, response)
      description: This is a socket.io connection to edit message under the /general namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - chatId
              - messageId
            properties:
              chatId:
                type: string
              messageId:
                type: string
              newMessage: 
                type: string
              mediaLink: 
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /general//:
    post:
      tags:
        - General Socket
      summary: SOCKET.IO CONNECTION (DELETE CHAT HISTROY) socket.on(deleteMessage, data) response- socket.emit(deleteMessage, response) - RESPONSE TO OTHER USER socket.emit(messageDeleted, response)
      description: This is a socket.io connection to delete message under the /general namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - chatId
              - messageId
            properties:
              chatId:
                type: string
              messageId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /general///:
    post:
      tags:
        - General Socket
      summary: SOCKET.IO CONNECTION (GET CHAT CONTACT HISTROY) socket.on(getChats, data) response- socket.emit(getChats, response)
      description: This is a socket.io connection to get chat contact histroy the /general namespace
      parameters:
        - in: body
          name: body
          required: false
          schema:
            type: object
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

#ORDER SOCKET CONNECTIONS
  /order:
    post:
      tags:
        - Order Socket
      summary: SOCKET.IO CONNECTION (SEND MESSAGE) socket.on(sendMessage, data) response- socket.emit(sendMessage, response) - RESPONSE TO OTHER USER socket.emit(incomingMessage, response)
      description: This is a socket.io connection to send message specific to order (order contracts and documents) under the /order namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - receiverId
              - orderId
            properties:
              orderId:
                type: string
              receiverId:
                type: string
              message: 
                type: string
              mediaLink: 
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /order/:
    post:
      tags:
        - Order Socket
      summary: SOCKET.IO CONNECTION (GET CHAT HISTROY) socket.on(getChatHistroy, data) response- socket.emit(getChatHistroy, response)
      description: This is a socket.io connection to get a single order message chat under the /order namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - orderId
            properties:
              orderId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /order//:
    post:
      tags:
        - Order Socket
      summary: SOCKET.IO CONNECTION (EDIT MESSAGE) socket.on(editMessage, data) response- socket.emit(editMessage, response) - RESPONSE TO OTHER USER socket.emit(messageUpdated, response)
      description: This is a socket.io connection to edit order contact message under the /order namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - contractId
              - messageId
            properties:
              contractId:
                type: string
              messageId:
                type: string
              newMessage: 
                type: string
              mediaLink: 
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /order//:
    post:
      tags:
        - Order Socket
      summary: SOCKET.IO CONNECTION (DELETE CHAT HISTROY) socket.on(deleteMessage, data) response- socket.emit(deleteMessage, response) - RESPONSE TO OTHER USER socket.emit(messageDeleted, response)
      description: This is a socket.io connection to delete order message under the /order namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - contractId
              - messageId
            properties:
              chatId:
                type: string
              messageId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /order///:
    post:
      tags:
        - Order Socket
      summary: SOCKET.IO CONNECTION (GET CHAT CONTACT HISTROY) socket.on(getChats, data) response- socket.emit(getChats, response)
      description: This is a socket.io connection to get chat order contact histroy the /order namespace
      parameters:
        - in: body
          name: body
          required: false
          schema:
            type: object
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

#TRANSACTION
  /transaction/summary/{period}:
    get:
      tags:
        - Transaction
      summary: Get transactions summary
      description: >
        Fetches the transaction summary for a user (buyer or seller) based on the specified period.  
        Only transactions with `transactionStatus = Completed` are included.  
        Returns totals grouped by `paymentStatus`.
      parameters:
        - name: period
          in: path
          required: true
          type: string
          enum: [today, week, month, year, all, custom]
          description: >
            Time period for filtering transactions.  
            Use `custom` with query params (`days` or `start` & `end`).
        - name: start
          in: query
          required: false
          type: string
          format: date-time
          description: Start date for custom period filtering (used with `end`).
        - name: end
          in: query
          required: false
          type: string
          format: date-time
          description: End date for custom period filtering (used with `start`).
        - name: days
          in: query
          required: false
          type: integer
          description: Number of past days to filter (alternative to `start` & `end`).
      responses:
        200:
          description: Transactions summary fetched successfully
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  enum: [Pending, Escrow, Released, Requested Refund, Refunded]
                  description: Payment status
                totalAmount:
                  type: number
                  format: double
                  description: Total transaction amount for this payment status
                count:
                  type: integer
                  description: Number of transactions for this payment status
          examples:
            application/json:
              [
                { "name": "Pending", "totalAmount": 200, "count": 5 },
                { "name": "Escrow", "totalAmount": 500, "count": 2 },
                { "name": "Released", "totalAmount": 1000, "count": 3 }
              ]
        400:
          description: Bad request (invalid params)
        500:
          description: Unable to fetch transactions summary

  /transaction/history:
    get:
      tags:
        - Transaction
      summary: Get transactions history
      description: >
        Fetches paginated transaction history for the authenticated user (buyer or seller).  
        Transactions can be filtered by `paymentStatus`, `period`, and custom date ranges.
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          description: Number of transactions to return per page.
        - name: page
          in: query
          required: false
          type: integer
          default: 1
          description: Page number for pagination.
        - name: status
          in: query
          required: false
          type: string
          enum: [Pending, Escrow, Released, Requested Refund, Refunded]
          description: Filter by payment status.
        - name: period
          in: query
          required: false
          type: string
          enum: [today, week, month, year, all, custom]
          description: >
            Time period for filtering transactions.  
            Use `custom` with query params (`days` or `start` & `end`).
        - name: start
          in: query
          required: false
          type: string
          format: date-time
          description: Start date for custom period filtering (used with `end`).
        - name: end
          in: query
          required: false
          type: string
          format: date-time
          description: End date for custom period filtering (used with `start`).
        - name: days
          in: query
          required: false
          type: integer
          description: Number of past days to filter (alternative to `start` & `end`).
      responses:
        200:
          description: Transactions history fetched successfully
        400:
          description: Bad request (invalid params)
        500:
          description: Unable to get transaction history

  /transaction/allTransaction:
    get:
      tags:
        - Transaction
      summary: Get all transactions history (ADMIN ROUTE)
      description: >
        Fetches paginated transaction history for the authenticated user (buyer or seller).  
        Transactions can be filtered by `paymentStatus`, `period`, and custom date ranges.
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          description: Number of transactions to return per page.
        - name: page
          in: query
          required: false
          type: integer
          default: 1
          description: Page number for pagination.
        - name: status
          in: query
          required: false
          type: string
          enum: [Pending, Escrow, Released, Requested Refund, Refunded]
          description: Filter by payment status.
        - name: period
          in: query
          required: false
          type: string
          enum: [today, week, month, year, all, custom]
          description: >
            Time period for filtering transactions.  
            Use `custom` with query params (`days` or `start` & `end`).
        - name: start
          in: query
          required: false
          type: string
          format: date-time
          description: Start date for custom period filtering (used with `end`).
        - name: end
          in: query
          required: false
          type: string
          format: date-time
          description: End date for custom period filtering (used with `start`).
        - name: days
          in: query
          required: false
          type: integer
          description: Number of past days to filter (alternative to `start` & `end`).
        - name: sellerId
          in: query
          required: false
          type: string
          description: id of seller
        - name: buyerId
          in: query
          required: false
          type: string
          description: id of buyer
      responses:
        200:
          description: Transactions history fetched successfully
        400:
          description: Bad request (invalid params)
        500:
          description: Unable to get transaction history

  /transaction/stats:
    get:
      tags:
        - Transaction
      summary: Get transaction stats history (ADMIN)
      description: >
        Fetches transactions history stats  
      parameters:
        - name: period
          in: query
          required: false
          type: string
          enum: [3days, 7days, 15days, 30days, 3mth, 6mth, 1year, alltime]
          description: >
            Time period for filtering transaction stats.  
      responses:
        200:
          description: Transactions stats history fetched successfully
        400:
          description: Bad request (invalid params)
        500:
          description: Unable to get orders history

  /transaction/transactionDetail/{transactionId}:
    get:
      tags:
        - Transaction
      summary: Get transactions summary
      description: >
        Fetches the transaction detail of a transaction
      parameters:
        - name: transactionIdriod
          in: path
          required: true
          type: string
          description: >
            transactionId of the specific transaction
      responses:
        200:
          description: Transaction detail fetched successfully
        400:
          description: Bad request (invalid params)
        500:
          description: Unable to fetch transactions summary

  /transaction/export:
    post:
      tags:
        - Transaction
      summary: Export transaction history
      description: >
        Exports transaction data in **CSV** and **PDF** formats as a ZIP file.  
        Can export a single transaction (using `transactionId`) or multiple transactions filtered by `period`, `start`, `end`, or `days`.  
        For sellers, only their transactions are exported. Buyers only export their transactions.
      consumes:
        - application/json
      produces:
        - application/zip
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              transactionId:
                type: string
                description: Transaction ID to export a single transaction.
              period:
                type: string
                enum: [today, week, month, year, all, custom]
                description: Time period to filter transactions (used for multiple transactions).
              start:
                type: string
                format: date-time
                description: Start date for custom period filtering (used with `end`).
              end:
                type: string
                format: date-time
                description: End date for custom period filtering (used with `start`).
              days:
                type: integer
                description: Number of past days to filter (alternative to `start` & `end`).
          example:
            transactionId: "TXN12345"
            period: "custom"
            start: "2025-09-01T00:00:00Z"
            end: "2025-09-25T23:59:59Z"
            days: 7
      responses:
        200:
          description: ZIP file containing CSV and PDF exports of transactions
          schema:
            type: string
            format: binary
        400:
          description: Bad request, e.g., missing transactionId when required
        404:
          description: No transaction found
        500:
          description: Unable to export transaction data

#ORDER
  /order/summary/{period}:
    get:
      tags:
        - Order
      summary: Get orders summary
      description: >
        Fetches the transaction summary for a user (buyer or seller) based on the specified period.  
        Returns totals grouped by `status`.
      parameters:
        - name: period
          in: path
          required: true
          type: string
          enum: [today, week, month, year, all, custom]
          description: >
            Time period for filtering orders.  
            Use `custom` with query params (`days` or `start` & `end`).
        - name: start
          in: query
          required: false
          type: string
          format: date-time
          description: Start date for custom period filtering (used with `end`).
        - name: end
          in: query
          required: false
          type: string
          format: date-time
          description: End date for custom period filtering (used with `start`).
        - name: days
          in: query
          required: false
          type: integer
          description: Number of past days to filter (alternative to `start` & `end`).
      responses:
        200:
          description: Order summary fetched successfully
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  enum: ['Pending', 'Processing', 'Shipment', 'Delivered', 'Cancelled', 'Returned']
                  description: Payment status
                totalAmount:
                  type: number
                  format: double
                  description: Total orders amount for this payment status
                count:
                  type: integer
                  description: Number of orders for this payment status
          examples:
            application/json:
              [
                { "name": "Pending", "totalAmount": 200, "count": 5 },
                { "name": "Shipment", "totalAmount": 500, "count": 2 },
                { "name": "Processing", "totalAmount": 1000, "count": 3 }
              ]
        400:
          description: Bad request (invalid params)
        500:
          description: Unable to fetch transactions summary

  /order/history:
    get:
      tags:
        - Order
      summary: Get order history
      description: >
        Fetches paginated orders history for the authenticated user (buyer or seller).  
        Orders can be filtered by `paymentStatus`, `period`, and custom date ranges.
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          description: Number of orders to return per page.
        - name: page
          in: query
          required: false
          type: integer
          default: 1
          description: Page number for pagination.
        - name: status
          in: query
          required: false
          type: string
          enum: ['Pending', 'Processing', 'Shipment', 'Delivered', 'Cancelled', 'Returned']
          description: Filter by payment status.
        - name: period
          in: query
          required: false
          type: string
          enum: [today, week, month, year, all, custom]
          description: >
            Time period for filtering orders.  
            Use `custom` with query params (`days` or `start` & `end`).
        - name: start
          in: query
          required: false
          type: string
          format: date-time
          description: Start date for custom period filtering (used with `end`).
        - name: end
          in: query
          required: false
          type: string
          format: date-time
          description: End date for custom period filtering (used with `start`).
        - name: days
          in: query
          required: false
          type: integer
          description: Number of past days to filter (alternative to `start` & `end`).
      responses:
        200:
          description: Orders history fetched successfully
        400:
          description: Bad request (invalid params)
        500:
          description: Unable to get orders history

  /order/allOrders:
    get:
      tags:
        - Order
      summary: Get all orders history (ADMIN ROUTE)
      description: >
        Fetches paginated orders history for the authenticated user (buyer or seller).  
        Orders can be filtered by `status`, `period`, and custom date ranges.
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          description: Number of orders to return per page.
        - name: page
          in: query
          required: false
          type: integer
          default: 1
          description: Page number for pagination.
        - name: status
          in: query
          required: false
          type: string
          enum: ['Pending', 'Processing', 'Shipment', 'Delivered', 'Cancelled', 'Returned']
          description: Filter by payment status.
        - name: period
          in: query
          required: false
          type: string
          enum: [today, week, month, year, all, custom]
          description: >
            Time period for filtering orders.  
            Use `custom` with query params (`days` or `start` & `end`).
        - name: start
          in: query
          required: false
          type: string
          format: date-time
          description: Start date for custom period filtering (used with `end`).
        - name: end
          in: query
          required: false
          type: string
          format: date-time
          description: End date for custom period filtering (used with `start`).
        - name: days
          in: query
          required: false
          type: integer
          description: Number of past days to filter (alternative to `start` & `end`).
        - name: sellerId
          in: query
          required: false
          type: string
          description: id of seller
        - name: buyerId
          in: query
          required: false
          type: string
          description: id of buyer
      responses:
        200:
          description: Orders history fetched successfully
        400:
          description: Bad request (invalid params)
        500:
          description: Unable to get orders history

  /order/stats:
    get:
      tags:
        - Order
      summary: Get order stats history (ADMIN)
      description: >
        Fetches orders history stats  
      parameters:
        - name: period
          in: query
          required: false
          type: string
          enum: [3days, 7days, 15days, 30days, 3mth, 6mth, 1year, alltime]
          description: >
            Time period for filtering orders stats.  
      responses:
        200:
          description: Orders stats history fetched successfully
        400:
          description: Bad request (invalid params)
        500:
          description: Unable to get orders history

  /order/orderDetail/{orderId}:
    get:
      tags:
        - Order
      summary: Get transactions summary
      description: >
        Fetches the order detail of a order
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
          description: >
            orderId of the specific order
      responses:
        200:
          description: Orders detail fetched successfully
        400:
          description: Bad request (invalid params)
        500:
          description: Unable to fetch order summary

  /order/newOrder:
    post:
      tags:
        - Order
      summary: Create new order invoice (SELLER)
      description: Endpoint for seller to create new order invoice
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - buyerEmail
              - amount
              - productId
              - quantity
            properties:
              buyerEmail:
                type: string
              amount:
                type: number
              productId:
                type: string
              quantity:
                type: number
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /order/editOrder:
    post:
      tags:
        - Order
      summary: Edit order invoice (SELLER)
      description: Endpoint for seller to edit order invoice
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - orderId
            properties:
              orderId:
                type: string
              buyerEmail:
                type: string
              amount:
                type: number
              productId:
                type: string
              quantity:
                type: number
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /order/makePayment:
    post:
      tags:
        - Order
      summary: pay order invoice
      description: Endpoint for buyer to pay for invoice
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - orderId
            properties:
              orderId:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

#SUBSCRIPTION
  /subscription:
    post:
      tags:
        - Subscription
      summary: Create a new subscription plan (ADMIN ROUTE)
      description: |
        This endpoint allows an admin to create a new subscription plan.
        Each plan includes details such as product name, price, subscription tier, interval, and features.
        interval options: ['hourly', 'monthly', 'quarterly', 'biannually', 'yearly']
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - productName
              - price
              - subscriptionTier
              - interval
            properties:
              productName:
                type: string
                example: Business Plan
              price: 
                type: number
                example: 30000
              subscriptionTier:
                type: number
                example: 2
              interval:
                type: string
                enum: ['hourly', 'monthly', 'quarterly', 'biannually', 'yearly']
                example: monthly
              features:
                type: array
                description: List of features included in the plan
                items:
                  type: object
                  properties:
                    titfeaturele:
                      type: string
                      example: "Priority customer support"
                    active:
                      type: boolean
                      example: true
              slug:
                type: string
                example: Most Popular
              productCTA:
                type: string
                example: Get Started Now

    get:
      tags:
        - Subscription
      summary: Get all subscription
      description: Endpoint to get all active subscription plans for users
      responses:
        200:
          description: Success - true
        400:
          description: error - false
        500:
          description: Server error

  /subscription/{id}:
    patch:
      tags:
        - Subscription
      summary: Update a subscription plan (ADMIN ROUTE)
      description: |
        This endpoint allows an admin to update an existing subscription plan by its ID.
        Only fields provided in the request body will be updated.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the subscription plan to update
          schema:
            type: string
            example: "652e2f74e33f7e0023b82a8b"
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              productName:
                type: string
                example: Business Plan
              subscriptionTier:
                type: number
                example: 2
              features:
                type: array
                description: List of features included in the plan
                items:
                  type: object
                  properties:
                    title:
                      type: string
                      example: "Priority customer support"
                    active:
                      type: boolean
                      example: true
              slug:
                type: string
                example: Most Popular
              productCTA:
                type: string
                example: Get Started Now
      responses:
        200:
          description: Subscription plan updated successfully
        400:
          description: Invalid input or bad request
        404:
          description: Subscription not found
        500:
          description: Internal server error

  /subscription/toggleActive:
    post:
      tags:
        - Subscription
      summary: Toggle active status for Subscription (ADMIN ROUTE)
      description: Endpoint for admin to toggle active status for subscription. this deactive the subscription of all users on the subscription if deactivated and do same when activated sending id (the _id of the subscription)
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /subscription/subscribe:
    post:
      tags:
        - Subscription
      summary: Subscribe for a plan
      description: Endpoint for users to subscribe for a subscription plan
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
      responses:
        200:
          description: Success
        400:
          description: User error
        500:
          description: Server error

  /subscription/all:
    get:
      tags:
        - Subscription
      summary: Get all subscription (ADMIN ROUTE)
      description: Endpoint to get all subscription plans
      responses:
        200:
          description: Success - true
        400:
          description: error - false
        500:
          description: Server error

  /subscription/histroy:
    get:
      tags:
        - Subscription
      summary: Get all users subscription histroy (ADMIN ROUTE)
      description: The endpoint provides all users subscription histroy
      parameters:
        - name: limit
          in: query
          required: true
          description: The limit for each data fetched
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: The page of the data to fetch
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /subscription/history/{id}:
    get:
      tags:
        - Subscription
      summary: Get subscription detail (ADMIN ROUTE)
      description: The endpoint provides subscription detail
      parameters:
        - name: id
          in: params
          required: true
          description: The id (_id) of the subscription
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error

  /subscription/stats:
    get:
      tags:
        - Subscription
      summary: Get Subscription stats (ADMIN ROUTE)
      description: The endpoint provides stats histroy on adverts
      parameters:
        - name: period
          in: query
          required: false
          description: The period for which the data should be fetched, values are - [3days 7days 30days 3mth 6mth 1year alltime] default is 30days
          schema:
            type: string
      responses:
        200:
          description: Success
        400: 
          description: user error
        500: 
          description: server error
